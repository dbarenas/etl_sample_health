# api/routers/biometrics.py
from fastapi import APIRouter, Depends, HTTPException, Query, Body, status
from sqlalchemy.orm import Session
from typing import List, Optional

from .. import crud, models as pyd_models # Pydantic models
from ..database import get_db # DB session dependency

router = APIRouter(
    tags=["Biometrics"], # Grouping tag for Swagger UI
    responses={404: {"description": "Not found"}},
)

# --- Device Readings for a specific patient ---
# Prefixing with /patients/{patient_id} to associate readings with a patient
@router.get("/patients/{patient_id}/device_readings", response_model=pyd_models.PaginatedDeviceReadingResponse)
def list_patient_device_readings(
    patient_id: str,
    biometric_type: Optional[str] = Query(None, description="Filter by biometric type (e.g., 'glucose', 'blood_pressure', 'weight')"),
    skip: int = Query(0, ge=0, description="Offset for pagination"),
    limit: int = Query(10, ge=1, le=100, description="Limit for pagination (max 100)"),
    db: Session = Depends(get_db)
):
    """
    Retrieve biometric device readings for a specific patient with pagination.
    Optionally filter by biometric type.
    """
    # First, check if patient exists
    patient = crud.get_patient(db, patient_id=patient_id)
    if not patient:
        raise HTTPException(status_code=404, detail=f"Patient with id {patient_id} not found.")

    readings_orm = crud.get_device_readings_for_patient(
        db, patient_id=patient_id, biometric_type=biometric_type, skip=skip, limit=limit
    )
    total_count = crud.count_device_readings_for_patient(
        db, patient_id=patient_id, biometric_type=biometric_type
    )
    
    return pyd_models.PaginatedDeviceReadingResponse(
        total_count=total_count,
        limit=limit,
        offset=skip,
        data=readings_orm
    )

@router.post(
    "/patients/{patient_id}/device_readings", 
    response_model=pyd_models.DeviceReadingResponse, 
    status_code=status.HTTP_201_CREATED,
    summary="Upsert a patient biometric reading"
)
def upsert_patient_device_reading(
    patient_id: str, 
    reading_data: pyd_models.DeviceReadingCreate, # Request body
    db: Session = Depends(get_db)
):
    """
    Upsert (create or update) a biometric device reading for a patient.
    - If a reading with the provided `reading_data.id` exists, it's updated.
    - Otherwise, a new reading is created.
    - The `patient_id` in the path must match `reading_data.patient_id`.
    """
    if patient_id != reading_data.patient_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Patient ID in path does not match patient_id in request body."
        )
    
    try:
        # The CRUD function already checks if patient exists before creating a new reading.
        # If patient_id in reading_data is for a non-existent patient, crud.upsert_device_reading will raise ValueError.
        db_reading = crud.upsert_device_reading(db, reading_data=reading_data)
        return db_reading
    except ValueError as ve: # Catch specific ValueError from CRUD for not found patient
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(ve))
    except Exception as e: # Catch any other unexpected errors
        # Log the exception e here if logging is set up
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="An internal error occurred during upsert.")


@router.delete("/device_readings/{device_reading_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_single_device_reading(device_reading_id: str, db: Session = Depends(get_db)):
    """
    Delete a specific biometric device reading by its ID.
    """
    deleted = crud.delete_device_reading(db, device_reading_id=device_reading_id)
    if not deleted:
        raise HTTPException(status_code=404, detail=f"Device reading with id {device_reading_id} not found.")
    return # No content response for successful deletion


# --- General Biometric Analytics ---
# This endpoint lists the pre-calculated summaries for all patients.
@router.get("/biometric_analytics", response_model=pyd_models.PaginatedBiometricSummaryResponse)
def list_all_patient_biometric_analytics(
    skip: int = Query(0, ge=0, description="Offset for pagination"), 
    limit: int = Query(10, ge=1, le=100, description="Limit for pagination (max 100)"), 
    db: Session = Depends(get_db)
):
    """
    Retrieve a list of pre-calculated biometric summaries for all patients.
    This data comes from the table generated by DBT.
    """
    summaries_orm = crud.get_all_biometric_summaries(db, skip=skip, limit=limit)
    total_count = crud.count_all_biometric_summaries(db)
    
    return pyd_models.PaginatedBiometricSummaryResponse(
        total_count=total_count,
        limit=limit,
        offset=skip,
        data=summaries_orm
    )
