# api/routers/patients.py
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional

from .. import crud, models as pyd_models # Pydantic models
from ..database import get_db # DB session dependency

router = APIRouter(
    prefix="/patients",
    tags=["Patients"],
    responses={404: {"description": "Not found"}},
)

@router.get("/", response_model=pyd_models.PaginatedPatientResponse)
def list_patients(
    skip: int = Query(0, ge=0, description="Offset for pagination"), 
    limit: int = Query(10, ge=1, le=100, description="Limit for pagination (max 100)"), 
    db: Session = Depends(get_db)
):
    """
    Retrieve a list of patients with pagination.
    """
    patients_orm = crud.get_patients(db, skip=skip, limit=limit)
    total_count = crud.count_patients(db)
    
    # Convert ORM objects to Pydantic models for response
    # patients_resp = [pyd_models.PatientResponse.from_orm(p) for p in patients_orm]
    # No need to manually convert if response_model handles it with from_attributes=True

    return pyd_models.PaginatedPatientResponse(
        total_count=total_count,
        limit=limit,
        offset=skip,
        data=patients_orm # FastAPI will convert these using PatientResponse's ORM mode
    )

@router.get("/{patient_id}", response_model=pyd_models.PatientResponse)
def get_patient_details(patient_id: str, db: Session = Depends(get_db)):
    """
    Retrieve details for a specific patient by their ID.
    """
    db_patient = crud.get_patient(db, patient_id=patient_id)
    if db_patient is None:
        raise HTTPException(status_code=404, detail="Patient not found")
    return db_patient # FastAPI will convert using PatientResponse's ORM mode


# --- Biometric Summaries for a specific patient ---
# This could also be in biometrics.py, but often patient-specific views are here.
# Let's assume the main "list biometric analytics" endpoint will be more generic in biometrics.py
# and this is a patient-centric view of their own summary.

@router.get("/{patient_id}/biometric_summary", response_model=pyd_models.BiometricSummaryResponse)
def get_patient_biometric_summary_for_patient(patient_id: str, db: Session = Depends(get_db)):
    """
    Retrieve the calculated biometric summary for a specific patient.
    This data comes from the table generated by DBT.
    """
    summary = crud.get_patient_biometric_summary(db, patient_id=patient_id)
    if summary is None:
        # Could also mean patient exists but no summary computed by DBT yet.
        # Or patient ID itself is invalid.
        # Check if patient exists first for a more specific error.
        db_patient = crud.get_patient(db, patient_id=patient_id)
        if db_patient is None:
            raise HTTPException(status_code=404, detail="Patient not found")
        raise HTTPException(status_code=404, detail="Biometric summary not found for this patient. DBT models may need to be run or patient may have no readings.")
    return summary

```
